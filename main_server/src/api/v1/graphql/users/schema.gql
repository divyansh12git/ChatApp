type User{
    id: ID!
    name: String!
    username: String!
    password: String!
    friends: Int
    requested: Int
    profilePictureURL:String
    Bio: String
}
type UserToRoom{
        roomID: String!
        friendID: Int!,
}

type getAllUsersResponse{
    id:Int!,
    name:string,
    username:string!,
    profilePictureURL:string,
    Bio:string,
}

type requestRequestingList{
    request:[Int],
    requesting:[Int]
}

type Queries{

    getAllUsers(search:String!):[getAllUsersResponse]
    getUser(username:String!):User
    getFriendsData(userId:Int!):[User]
    getUserToRoomData(userId:Int!):[UserToRoom]
    getRequestRequestingList(userId:Int!):requestRequestingList
    getRequestUserData(userId:Int!):[getAllUsersResponse]
}

input createUserInput{
    name: String!
    username: String!
    password: String!
    friends: Int
    requested: Int
    number_of_posts: Int
    profilePictureURL:String
    Bio: String
}
input updateUser{
    name: String!
    username: String!
    password: String
    friends: Int
    requested: Int
    number_of_posts: Int
    profilePictureURL:String
    Bio: String
}
type mutation{
    #create user
    createUser(input:createUserInput):Boolean
    #update user
    updateUser(input:updateUser,user:String!):Boolean

    sendRequest(myId:String!, userId:String!):Boolean
    actionOnRequest(myId:String!, userId:String! ):Boolean
}